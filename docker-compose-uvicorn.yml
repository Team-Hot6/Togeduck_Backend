version: '3.8'

volumes:
  postgres: {}
  django_media: {}
  django_static: {}

services:
  postgres:
    container_name: postgres
    image: postgres:14.5
    volumes:
      - postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=P@ssw0rd
      - POSTGRES_DB=django
    restart: always
    networks:
      carrot:
        ipv4_address: 192.168.16.2

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      carrot:
        ipv4_address: 192.168.16.3

  backend:
    container_name: backend
    build: ./backend/
    command: sh -c "python manage.py collectstatic --no-input && python manage.py migrate && uvicorn Togeduck.asgi:application --host 0.0.0.0 --port 8000 --reload --ws websockets"
    volumes:
      - ./backend/django/:/app/
      - /etc/localtime:/etc/localtime:ro
      - django_media:/app/media/ # nginx에서 media를 사용할 수 있도록 volume을 지정해줍니다.
      - django_static:/app/static/ # nginx에서 static을 사용할 수 있도록 volume을 지정해줍니다.
    environment: # django에서 사용할 설정들을 지정해줍니다.
      - DEBUG=1
      - POSTGRES_DB=django
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=P@ssw0rd
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on:
      - postgres
      - redis
    links:
      - redis
    restart: always
    hostname: backend
    ports:
      - 8000:8000
    networks:
      carrot:
        ipv4_address: 192.168.16.4

  nginx:
    container_name : nginx
    image: nginx:1.23.2
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - django_media:/media/ # django의 media를 사용할 수 있도록 volume을 지정해줍니다.
      - django_static:/static/ # django의 static 사용할 수 있도록 volume을 지정해줍니다.
    depends_on:
      - backend
    restart: always
    networks:
      carrot:
        ipv4_address: 192.168.16.5

networks:
  carrot:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 192.168.16.0/16
